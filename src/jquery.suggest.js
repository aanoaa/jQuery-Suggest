// Generated by CoffeeScript 1.3.1
(function() {

  $.fn.extend({
    suggest: function(data, settings) {
      return this.each(function() {
        var $this, self;
        $this = $(this);
        self = $.suggest;
        $.data(this, 'suggestions', data);
        if (settings) {
          $.extend(self.settings, settings);
        }
        $this.on('focus.suggest', function() {
          $(document).on('keyup.suggest', {
            msg: this
          }, self.keyup);
          return $(document).on('keydown.suggest', {
            msg: this
          }, self.keydown);
        });
        return $this.on('focusout.suggest', function() {
          $.suggest.clear();
          $(document).off('keyup.suggest');
          return $(document).off('keydown.suggest');
        });
      });
    }
  });

  $.extend($.suggest = {}, {
    settings: {
      css: {
        'position': 'absolute',
        'margin': 0,
        'padding': '3px',
        'listStyleType': 'none',
        'color': '#555',
        'z-index': 999,
        'background-color': '#fff',
        'border-color': '#555',
        'border-style': 'solid',
        'border-width': '1px'
      }
    },
    keyup: function(e) {
      var $el, DOWN, ENTER, ESC, LEFT, RIGHT, TAB, UP, list, suggested, _ref;
      $el = $(e.data.msg);
      _ref = [9, 13, 27, 37, 38, 39, 40], TAB = _ref[0], ENTER = _ref[1], ESC = _ref[2], LEFT = _ref[3], UP = _ref[4], RIGHT = _ref[5], DOWN = _ref[6];
      switch (e.keyCode) {
        case ENTER:
          return $.suggest.select($el.get(0));
        case ESC:
          return $.suggest.clear();
        case UP:
          if ($.suggest.visible) {
            return $.suggest.up();
          }
          break;
        case TAB:
        case DOWN:
          if ($.suggest.visible) {
            return $.suggest.down();
          }
          break;
        default:
          list = $.data($el.get(0), 'suggestions');
          suggested = $.suggest.matching($el.get(0), list);
          if (suggested.length === 0 || suggested.length === list.length) {
            return $.suggest.clear();
          } else {
            return $.suggest.show($el.get(0), suggested);
          }
      }
    },
    keydown: function(e) {
      var ENTER, TAB, _ref;
      _ref = [9, 13], TAB = _ref[0], ENTER = _ref[1];
      switch (e.keyCode) {
        case TAB:
        case ENTER:
          if ($.suggest.visible) {
            return e.preventDefault();
          }
          break;
      }
    },
    select: function(el) {
      $(el).val($("#jquery-suggest li:eq(" + ($.suggest.index !== 0 ? $.suggest.index - 1 : 0) + ")").text());
      return $.suggest.clear();
    },
    up: function() {
      if ($.suggest.index > 1) {
        $.suggest.index--;
      }
      return $.suggest.highlight();
    },
    down: function() {
      if ($.suggest.index < $.suggest.size) {
        $.suggest.index++;
      }
      return $.suggest.highlight();
    },
    highlight: function() {
      return $("#jquery-suggest li").css({
        'background-color': 'transparent'
      }).eq($.suggest.index - 1).css({
        'background-color': '#C0D9D9'
      });
    },
    clear: function() {
      $('#jquery-suggest').each(function() {
        return $(this).remove();
      });
      $.suggest.visible = false;
      $.suggest.index = 0;
      return $.suggest.size = 0;
    },
    matching: function(el, list) {
      var re;
      re = new RegExp($(el).val().replace(/[-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"));
      return $.grep(list, function(word, i) {
        return re.test(word);
      });
    },
    show: function(el, items) {
      var $el, $em, $ul, index, item, l, list, offset, v, _i, _j, _len, _len1, _ref, _ref1;
      $.suggest.clear();
      $el = $(el);
      offset = $el.offset();
      $ul = $('<ul id="jquery-suggest" />').css($.extend({
        top: offset.top + $el.height() + 7,
        left: offset.left
      }, $.suggest.settings.css));
      _ref = [$el.val(), []], v = _ref[0], list = _ref[1];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        index = item.indexOf(v);
        $em = $("<em>" + v + "</em>").css({
          'color': '#000',
          'font-style': 'normal',
          'font-weight': 'bold'
        });
        list.push($("<li></li>").append("" + (item.slice(0, item.indexOf(v)))).append($em).append("" + (item.slice(index + v.length))).on('hover', function() {
          $el.val($(this).text());
          $("#jquery-suggest li").css({
            'background-color': 'transparent'
          });
          return $(this).css({
            'background-color': '#C0D9D9'
          });
        }));
        _ref1 = list.sort(function(a, b) {
          return a.html().indexOf('<') - b.html().indexOf('<');
        });
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          l = _ref1[_j];
          $ul.append(l);
        }
      }
      $('body').append($ul);
      $.suggest.visible = true;
      $.suggest.index = 0;
      return $.suggest.size = items.length;
    }
  });

}).call(this);
